name: Build Draft PDFs

on:
  workflow_dispatch:
    inputs:
      draft_file:
        description: "Pfad zur Draft-Datei"
        required: false
        type: string
      kind:
        description: "Art (prosa/poesie)"
        required: false
        type: string
      author:
        description: "Autor"
        required: false
        type: string
      work:
        description: "Werk"
        required: false
        type: string
  push:
    paths:
      - "texte_drafts/**/*_birkenbihl_DRAFT_*.txt"
      - "texte_drafts/**/*_DRAFT_*.txt"
      - "build_prosa_drafts_adapter.py"
      - "build_poesie_drafts_adapter.py"
      - "prosa_pdf.py"
      - "poesie_pdf.py"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install reportlab

      - name: Install DejaVu fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-dejavu-core
          ln -sf /usr/share/fonts/truetype/dejavu/DejaVuSans.ttf shared/fonts/
          ln -sf /usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf shared/fonts/
          ls -l shared/fonts/DejaVuSans*.ttf

      - name: Build Draft PDFs
        run: |
          echo "Build Draft PDFs gestartet..."

          # Finde alle Draft-Dateien die in diesem Commit geändert wurden
          echo "Suche nach geänderten Draft-Dateien..."

          # Prüfe ob es vorherige Commits gibt
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            # Vergleiche mit vorherigem Commit
            DRAFT_FILES=$(git diff --name-only HEAD~1 HEAD | grep 'texte_drafts/.*_DRAFT_.*\.txt$' || true)
          else
            # Erster Commit - suche alle Draft-Dateien
            echo "Erster Commit erkannt, suche alle Draft-Dateien..."
            DRAFT_FILES=$(find texte_drafts -name "*_DRAFT_*.txt" 2>/dev/null || true)
          fi

          if [ -z "$DRAFT_FILES" ]; then
            echo "Keine neuen Draft-Dateien gefunden"
            exit 0
          fi

          echo "Gefundene Draft-Dateien:"
          echo "$DRAFT_FILES"

          # Gruppiere Draft-Dateien nach Autor/Werk und sortiere nach Zeitstempel
          echo "Gruppiere und sortiere Draft-Dateien..."

          # Erstelle temporäre Datei für Gruppierung
          TEMP_GROUP_FILE=$(mktemp)

          for file in $DRAFT_FILES; do
            # Extrahiere Autor und Werk aus dem Pfad
            # z.B. texte_drafts/prosa_drafts/Platon/Menon/datei.txt
            IFS='/' read -ra PATH_PARTS <<< "$file"
            if [ ${#PATH_PARTS[@]} -ge 4 ]; then
              KIND_TYPE="${PATH_PARTS[1]}"  # prosa_drafts oder poesie_drafts
              AUTHOR="${PATH_PARTS[2]}"     # Platon
              WORK="${PATH_PARTS[3]}"       # Menon
              
              # Extrahiere Zeitstempel aus Dateinamen
              # z.B. Menon_birkenbihl_draft_birkenbihl_DRAFT_20250914_125549.txt
              FILENAME="${PATH_PARTS[4]}"
              TIMESTAMP=$(echo "$FILENAME" | grep -o '[0-9]\{8\}_[0-9]\{6\}' || echo "00000000_000000")
              
              echo "${KIND_TYPE}|${AUTHOR}|${WORK}|${TIMESTAMP}|${file}" >> "$TEMP_GROUP_FILE"
            fi
          done

          # Sortiere nach Art, Autor, Werk, dann nach Zeitstempel (neueste zuerst)
          sort -t'|' -k1,1 -k2,2 -k3,3 -k4,4r "$TEMP_GROUP_FILE" > "${TEMP_GROUP_FILE}.sorted"

          # Verarbeite nur den neuesten Draft pro Autor/Werk
          CURRENT_GROUP=""
          while IFS='|' read -r KIND_TYPE AUTHOR WORK TIMESTAMP FILE; do
            GROUP_KEY="${KIND_TYPE}|${AUTHOR}|${WORK}"
            
            if [ "$GROUP_KEY" != "$CURRENT_GROUP" ]; then
              CURRENT_GROUP="$GROUP_KEY"
              echo "Verarbeite neuesten Draft: $FILE (Zeitstempel: $TIMESTAMP)"
              
              # Lösche alte PDFs für dieses Werk
              PDF_DIR="pdf_drafts/${KIND_TYPE}/${AUTHOR}/${WORK}"
              if [ -d "$PDF_DIR" ]; then
                echo "Lösche alte PDFs in: $PDF_DIR"
                find "$PDF_DIR" -name "*.pdf" -delete
              fi
              
              # Bestimme ob es Prosa oder Poesie ist und erstelle neue PDFs
              if [[ "$KIND_TYPE" == "prosa_drafts" ]]; then
                echo "Erstelle Prosa PDFs für: $FILE"
                # Verwende absoluten Pfad
                python build_prosa_drafts_adapter.py "$(pwd)/$FILE"
              elif [[ "$KIND_TYPE" == "poesie_drafts" ]]; then
                echo "Erstelle Poesie PDFs für: $FILE"
                # Verwende absoluten Pfad
                python build_poesie_drafts_adapter.py "$(pwd)/$FILE"
              else
                echo "Unbekannter Draft-Typ für: $FILE"
              fi
            else
              echo "Überspringe älteren Draft: $FILE (Zeitstempel: $TIMESTAMP)"
            fi
          done < "${TEMP_GROUP_FILE}.sorted"

          # Aufräumen
          rm -f "$TEMP_GROUP_FILE" "${TEMP_GROUP_FILE}.sorted"

      - name: Commit Draft PDFs
        run: |
          echo "Comitte PDF-Änderungen..."

          # Füge alle PDF-Änderungen hinzu (neue und gelöschte)
          git add pdf_drafts/

          # Prüfe ob es Änderungen gibt
          if git diff --cached --quiet; then
            echo "Keine PDF-Änderungen zu committen"
          else
            git commit -m "CI: Draft PDFs neu gebaut - $(date '+%Y-%m-%d %H:%M:%S')"
            echo "PDFs erfolgreich committed"
          fi
